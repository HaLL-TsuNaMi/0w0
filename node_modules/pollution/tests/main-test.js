require("../array_methods")
require("../object_methods")
require("../number_methods")
require("../string_methods")
require("../function_methods")
{//array tests
	const actual = [1, 2]
	const expected = [1, 2]
	console.assert(Object.deepEqual(actual, expected))
}
{
	const actual = [1, 2]
	const expected = [1]
	console.assert(!Object.deepEqual(actual, expected))
}
{//object tests
	{//level 0 nesting 
		const actual = 
			{
				operator: "+",
				params: [
					"a", 
					"b", 
				], 
			}
		const expected = 
			{
				operator: "+",
				params: [
					"a", 
					"b", 
				], 
			}
		console.assert(Object.deepEqual(actual, expected))
	}
	{//level 0 not equal
		const actual = 
			{
				operator: "+",
				params: [
					"a", 
					"b", 
				], 
			}
		const expected = 
			{
				operator: "+",
				params: [
					"a", 
					"c", 
				], 
			}
		console.assert(!Object.deepEqual(actual, expected))
	}
	{//level 0 missing param
		const actual = 
			{
				operator: "+",
				params: [
					"b", 
				], 
			}
		const expected = 
			{
				operator: "+",
				params: [
					"a", 
					"c", 
				], 
			}
		console.assert(!Object.deepEqual(actual, expected))
	}
	{//simple
		const actual = {}
		const expected = {foo: "bar"}
		console.assert(!Object.deepEqual(actual, expected))
	}
	{ //level 1 nesting
		const actual = 
			{
				operator: "+",
				params: [
					"a", 
					"b", 
					{
						operator: "*",
						params: [
							"c",
							"d",
						],
					}
				], 
			}
		const expected = 
			{
				operator: "+",
				params: [
					"a", 
					"b", 
					{
						operator: "*",
						params: [
							"c",
							"d",
						],
					}
				], 
			}
		console.assert(Object.deepEqual(actual, expected))
	}
}
{//array tests
	const original = [1, 2, 3]
	const expected = [2, 3] 
	const actual = original.drop()
	console.assert(Object.deepEqual(actual, expected))
}

{//number tests
	const original = 5
	const expected = [1, 2, 3, 4, 5] 
	const actual =[...original]
	console.assert(Object.deepEqual(actual, expected))
}
{//string tests
	const original = `
		function() {
			foo = "bar"
			function() {
				return "something"
			}
		}
	`
	const expected = `
function() {
	foo = "bar"
	function() {
		return "something"
	}
}`.trim()

	const actual = original.trimIndent()
	console.assert(Object.deepEqual(actual, expected))
}
{//function tests
	const f = (a)=> {
		for(let i = 0; i < 10000000; i++) {
			Math.atan(1.0) * 180 / Math.PI
		}
	}
	const patternsGen = function*() {
		yield /\d{0,3}ns/
		yield /\d{0,3}us \d{0,3}ns/
	 	yield /\d{0,3}ms \d{0,3}us \d{0,3}ns/
		yield /\d{0,3}s \d{0,3}ms \d{0,3}us \d{0,3}ns/
	}
	const actual = Function.bench(f, "a")
	testCase: {
		for(let pattern of patternsGen()) {
			if(pattern.test(actual)) {
				console.log(actual)
				console.assert(true)
				break testCase
			}
		}
		console.assert(false)
	}
}
